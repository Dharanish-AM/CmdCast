const isWindows = process.platform === "win32";

const commands = isWindows
  ? {
      volume_unmute: `nircmd.exe mutesysvolume 0`,
      volume_mute: `nircmd.exe mutesysvolume 1`,
      lock: `rundll32.exe user32.dll,LockWorkStation`,
      sleep: `rundll32.exe powrprof.dll,SetSuspendState 0,1,0`,
      shutdown: `shutdown /s /t 0`,
      restart: `shutdown /r /t 0`,
      brightness_down: `powershell -Command "$brightness = (Get-WmiObject -Namespace root/WMI -Class WmiMonitorBrightnessMethods); $brightness.WmiSetBrightness(1, 30)"`,
      brightness_up: `powershell -Command "$brightness = (Get-WmiObject -Namespace root/WMI -Class WmiMonitorBrightnessMethods); $brightness.WmiSetBrightness(1, 100)"`,
      open_notification_center: `powershell -Command "[System.Windows.Forms.MessageBox]::Show('Notification Center toggle not supported directly')"`,
      mute: `nircmd.exe mutesysvolume 1`,
      unmute: `nircmd.exe mutesysvolume 0`,
      toggle_dnd: `powershell -Command "[System.Windows.Forms.MessageBox]::Show('Please enable Focus Assist manually')"`,
      show_mission: `powershell -Command "[System.Windows.Forms.MessageBox]::Show('Mission Control equivalent not available on Windows')"`,
      open_safari: `start microsoft-edge:https://www.google.com`,
      open_terminal: `start cmd`,
      clipboard: `echo Hello from server! | clip && echo ðŸ“‹ Copied to clipboard!`,
      notify: `powershell -Command "[Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime];"`,
      open_finder: `explorer.exe`,
      get_ip: `ipconfig | findstr /i "IPv4"`,
      battery_status: `WMIC Path Win32_Battery Get EstimatedChargeRemaining`,
      disk_usage: `wmic logicaldisk get size,freespace,caption`,
      screenshot: `powershell -command "Add-Type -AssemblyName System.Windows.Forms;Add-Type -AssemblyName System.Drawing;$bounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds;$bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height;$graphics = [System.Drawing.Graphics]::FromImage($bitmap);$graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size);$bitmap.Save('C:\\Users\\Public\\screenshot.jpg');Write-Output 'Screenshot saved'"`,
    }
  : {
      volume_unmute: `osascript -e 'set volume without output muted' -e 'set volume output volume 100'`,
      volume_mute: `osascript -e 'set volume with output muted'`,
      lock: `osascript -e 'tell application "System Events" to keystroke "q" using {control down, command down}'`,
      sleep: `pmset sleepnow`,
      shutdown: `osascript -e 'tell app "System Events" to shut down'`,
      restart: `osascript -e 'tell app "System Events" to restart'`,
      open_safari: `open -a Safari`,
      open_terminal: `open -a Terminal`,
      clipboard: `echo 'Hello from server!' | pbcopy && echo 'ðŸ“‹ Copied to clipboard!'`,
      brightness_down: `osascript -e 'tell application "System Events" to key code 145' && echo "ðŸ”… Dimmed screen"`,
      brightness_up: `osascript -e 'tell application "System Events" to key code 144' && echo "ðŸ”† Brightened screen"`,
      notify: `osascript -e 'display notification "Remote triggered" with title "Agent"'`,
      open_notification_center: `osascript -e 'tell application "System Events" to key code 160'`,
      mute: `osascript -e 'set volume with output muted'`,
      unmute: `osascript -e 'set volume without output muted'`,
      toggle_dnd: `osascript -e 'display notification "Please enable DND manually from Control Center" with title "CmdCast"'`,
      open_finder: `open -a Finder`,
      show_mission: `osascript -e 'tell application "Mission Control" to launch'`,
      get_ip: `ifconfig | grep "inet " | grep -v 127.0.0.1 | awk '{print $2}'`,
      battery_status: `pmset -g batt | grep -Eo "\\d+%"`,
      disk_usage: `df -h / | tail -1 | awk '{print $5}'`,
      screenshot: `screencapture -x -t jpg "$HOME/Desktop/screen.jpg" && echo "Screenshot saved"`,
    };

module.exports = commands;
